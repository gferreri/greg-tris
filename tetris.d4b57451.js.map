{"version":3,"sources":["pieceDefinitions/BoxDefinition.ts","pieceDefinitions/BarDefinition.ts","pieceDefinitions/LDefinition.ts","Square.ts","constants.ts","Piece.ts","PieceFactory.ts","Board.ts","tetris.ts"],"names":[],"mappings":"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","file":"tetris.d4b57451.js","sourceRoot":"../src","sourcesContent":["import { SquareDefinition } from './SquareDefinition'\n\nconst BoxDefinition: Array<SquareDefinition> = [\n  {\n    initialPosition: [7, 0],\n    rotations: [[0, 0], [0, 0], [0, 0], [0, 0]]\n  },\n  {\n    initialPosition: [7, 1],\n    rotations: [[0, 0], [0, 0], [0, 0], [0, 0]]\n  },\n  {\n    initialPosition: [6, 0],\n    rotations: [[0, 0], [0, 0], [0, 0], [0, 0]]\n  },\n  {\n    initialPosition: [6, 1],\n    rotations: [[0, 0], [0, 0], [0, 0], [0, 0]]\n  }\n]\n","import {} from './SquareDefinition'\n\nimport { SquareDefinition } from './SquareDefinition'\n\nexport const BarDefinition: Array<SquareDefinition> = [\n  {\n    initialPosition: [7, 0],\n    rotations: [[1, 1], [-1, 2], [-2, -2], [2, -1]]\n  },\n  {\n    initialPosition: [7, 1],\n    rotations: [[0, 0], [0, 1], [-1, -1], [1, 0]]\n  },\n  {\n    initialPosition: [7, 2],\n    rotations: [[-1, -1], [1, 0], [0, 0], [0, 1]]\n  },\n  {\n    initialPosition: [7, 3],\n    rotations: [[-2, -2], [2, -1], [1, 1], [-1, 2]]\n  }\n]\n","import { SquareDefinition } from './SquareDefinition'\n\nexport const LDefinition: Array<SquareDefinition> = [\n  {\n    initialPosition: [6, 0],\n    rotations: [[2, 0], [-1, 2], [-1, -1], [0, -1]]\n  },\n  {\n    initialPosition: [6, 1],\n    rotations: [[1, -1], [0, 1], [0, 0], [-1, 0]]\n  },\n  {\n    initialPosition: [6, 2],\n    rotations: [[0, -2], [1, 0], [1, 1], [-2, 1]]\n  },\n  {\n    initialPosition: [7, 2],\n    rotations: [[-1, -1], [0, -1], [2, 0], [-1, 2]]\n  }\n]\n","import { Rotation } from './pieceDefinitions/SquareDefinition'\n\nexport class Square {\n\n\trotationIndex: number = 0\n\n\tconstructor (public x: number, public y: number, public color: string,\n\t\tprivate rotations: Array<Rotation>) {\n\t}\n\n\trotate(clockwise: any){\n\t\tlet rotateY = this.rotations[this.rotationIndex][1]\n\t\tlet rotateX = this.rotations[this.rotationIndex][0]\n\t\tif (!clockwise) {\n\t\t\trotateY *= 1\n\t\t\trotateX *= 1\n\t\t}\n\n\t\tthis.x += rotateX\n\t\tthis.y += rotateY\n\n\t\tthis.rotationIndex = (this.rotationIndex + 1) % 4\n\t}\n}","export const boardWidth = 500\nexport const columnsCount = 15\nexport const rowCount = 24\nexport const squareLength = boardWidth / columnsCount","import { Square } from './Square'\nimport { Board } from './Board'\nimport { rowCount, columnsCount } from './constants'\nexport class Piece {\n\tsquares: Array<Square>\n\tconstructor(private board: Board){\n\t\tthis.squares = []\n\t}\n\t\n\trotate (clockwise: boolean){\n\t\tthis.clearPreviousBoardPosition()\n\t\tfor (let square of this.squares){\n\t\t\tsquare.rotate(clockwise)\n\t\t\tif (square.x >= 0 && square.y >= 0) {\n\t\t\t\tthis.board.rows[square.y].columns[square.x] = square\n\t\t\t} \n\t\t}\n\t}\n\n\tprivate clearPreviousBoardPosition() {\n\t\tfor (let square of this.squares) {\n\t\t\tif (square.x >= 0 && square.y >= 0) {\n\t\t\t\tthis.board.rows[square.y].columns[square.x] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tisValidMove (x: number, y: number) : boolean {\n\t\tif ( (y >= 0 && y < rowCount) && ( x >= 0 && x < columnsCount)) {\n\t\t\tconst boardCell = this.board.rows[y].columns[x]\n\t\t\treturn boardCell === null || this.squares.indexOf(boardCell) >= 0\n\t\t}\n\t\treturn false\n\t}\n\n\tmove (x: number, y: number) {\n\t\tif (this.squares.every(s => this.isValidMove(s.x + x, s.y + y))) {\n\t\t\tthis.clearPreviousBoardPosition()\n\t\t\tfor (let square of this.squares) {\n\t\t\t\tsquare.x += x\n\t\t\t\tsquare.y += y\n\t\t\t\tthis.board.rows[square.y].columns[square.x] = square\n\t\t\t}\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tmoveRight () {\n\t\tthis.move(1,0)\n\t}\n\n\tmoveLeft () {\n\t\tthis.move(-1, 0)\n\t}\n\t\n\tdescend () {\n\t\treturn this.move(0, 1)\n\t}\n}","import { BoxDefinition } from './pieceDefinitions/BoxDefinition'\nimport { BarDefinition } from './pieceDefinitions/BarDefinition'\nimport { LDefinition } from './pieceDefinitions/LDefinition'\nimport { Square } from './Square'\nimport { Board } from './Board'\nimport { Piece } from './Piece'\n\nconst colors = [\n\t'#1E1E24',\n\t'#FB9F89',\n\t'#C4AF9A',\n\t'#81AE9D',\n\t'#21A179'\n]\n\nconst pieces = [LDefinition, BarDefinition, BoxDefinition]\n\nexport class PieceFactory {\n\n\tconstructor (private board: Board) { }\n\n\tgetNextPiece (){\n\t\tconst piece = new Piece(this.board)\n    const color = colors[Math.floor(Math.random() * colors.length)]\n    const pieceDefinition = pieces[Math.floor(Math.random() * pieces.length)]\n\t\tpiece.squares = pieceDefinition.map(def => new Square(def.initialPosition[0], def.initialPosition[1], color, def.rotations))\n\n\t\tfor (let square of piece.squares) {\n\t\t\tthis.board.rows[square.y].columns[square.x] = square\n\t\t}\n\t\treturn piece\n\t}\n}","import { Square } from './Square'\nimport { columnsCount, rowCount} from './constants'\nexport class Row {\n\tcolumns: Array<Square | null>\n\tconstructor () {\n\t\tthis.columns = []\n\t\tfor (let i = 0; i < columnsCount; i++){\n\t\t\tthis.columns.push(null)\n\t\t}\n\t}\n}\n\nexport class Board {\n\trows: Row[]\n\n\tconstructor (){\n\t\tthis.rows = []\n\t\tfor (let i = 0; i < rowCount; i++){\n\t\t\tthis.rows.push(new Row())\n\t\t}\n\t}\n\n\tprocessCompleteRows () {\n\t\tconst completeRows: number[] = this.rows\n\t\t.map((row, i) => {\n\t\t\t\tif (row.columns.every(cell => !!cell)) {\n\t\t\t\t\treturn i\n\t\t\t\t}\n\t\t\t\treturn -1\n\t\t\t})\n\t\t.filter(rowIndex => rowIndex >= 0)\n\n\t\tcompleteRows.forEach(\n\t\t\trowIndex => {\n\t\t\t\tthis.rows.splice(rowIndex, 1)\n\t\t\t\tthis.rows.unshift(new Row())\n\t\t\t}\n\t\t)\n\t\treturn completeRows\n\t}\n}","import { PieceFactory } from './PieceFactory'\nimport { Piece } from './Piece'\nimport { Board } from './Board'\nimport { squareLength } from './constants'\n\n\nconst board = new Board()\n\nasync function animateRowClear (rowIndex: number) {\n\tconst ctx = getBoardDrawingContext()\n\tlet x = ctx.canvas.width / 2\n\tlet y = squareLength * rowIndex\n\treturn new Promise(resolve => {\n\t\tconst expand = (width: number) => setTimeout(() => {\n\t\t\tctx.clearRect(x - (width / 2), y, width, squareLength)\n\t\t\twidth += (ctx.canvas.width / 20)\n\t\t\tif (width < ctx.canvas.width) {\n\t\t\t\texpand(width)\n\t\t\t} else {\n\t\t\t\tresolve()\n\t\t\t}\n\t\t}, 10)\n\t\texpand(10)\n\t})\n}\n\nfunction drawBoard () {\n\tlet ctx = getBoardDrawingContext()\n\tlet rowIndex = 0\n    for (let row of board.rows) {\n\t\t\tlet columnIndex = 0\n        for (let square of row.columns) {\n\t\t\t\t\tctx.lineWidth = 2\n\t\t\t\t\tconst y = rowIndex * squareLength\n\t\t\t\t\tconst x = columnIndex * squareLength\n\t\t\t\t\tif (square) {\n\t\t\t\t\t\tctx.beginPath()\n\t\t\t\t\t\tctx.fillStyle = square.color\n\t\t\t\t\t\tctx.rect(x, y, squareLength, squareLength)\n\t\t\t\t\t\tctx.stroke()\n\t\t\t\t\t\tctx.fill()\n          } else {\n\t\t\t\t\t\t\tctx.clearRect(x, y, squareLength, squareLength)\n\t\t\t\t\t}\n\t\t\t\t\tcolumnIndex++\n\t\t\t\t}\n\t\t\trowIndex++\n\t\t}\n\t\t\n\t\tlet scoreSpan = document.getElementById('score') as HTMLSpanElement\n\t\tscoreSpan.innerText = score.toString()\n}\n\nlet currentPiece: Piece\nconst pieceFactory = new PieceFactory(board)\nlet score = 0\n\nlet gameLoopHandle : number | null\n\n\nwindow.onload = () => {\n\tcurrentPiece = pieceFactory.getNextPiece()\n\tdrawBoard()\n\tstartGameLoop()\n}\n\nfunction getBoardDrawingContext() {\n\tconst canvas = document.getElementById('board') as HTMLCanvasElement;\n\treturn canvas.getContext('2d') as CanvasRenderingContext2D\n}\n\nfunction startGameLoop() {\n\tgameLoopHandle = window.setInterval(gameLoop, 750);\n}\n\nfunction stopGameLoop() {\n\twindow.clearInterval(gameLoopHandle as number)\n\tgameLoopHandle = null\n}\n\nasync function gameLoop () {\n\tstopGameLoop()\n\tconst didMove = currentPiece.descend()\n\tif (!didMove) {\n\t\t// check for complete rows\n\t\tconst completeRows = board.processCompleteRows()\n\t\tscore += completeRows.length * 100\n\t\tif (completeRows.length === 4) {\n\t\t\tscore += 500\n\t\t}\n\n\t\tawait Promise.all(completeRows.map(animateRowClear))\n\t\n\t\tcurrentPiece = pieceFactory.getNextPiece()\n\t}\n\tdrawBoard()\n\tstartGameLoop()\n}\n\nwindow.onkeydown = (event: KeyboardEvent) => {\n\tswitch (event.code) {\n\t\tcase 'Space' :\n\t\t\tcurrentPiece.rotate(true)\n\t\t\tbreak\n\t\tcase 'KeyL':\n\t\tcase 'ArrowRight':\n\t\t\tcurrentPiece.moveRight()\n\t\t\tbreak\n\t\tcase 'KeyJ':\n\t\tcase 'ArrowLeft':\n\t\t\tcurrentPiece.moveLeft()\n\t\t\tbreak\n\t\tcase 'KeyK':\n\t\t\tcurrentPiece.descend()\n\t\t\tbreak\n\t\tcase 'KeyP':\n\t\t\tif (gameLoopHandle !== null) {\n\t\t\t\tstopGameLoop()\n\t\t\t} else {\n\t\t\t\tstartGameLoop()\n\t\t\t}\n\t\t\tbreak\n\t}\n\tdrawBoard()\n}"]}